library
library(RSNNS)
library('RSNNS')
installed.packages
installed.packages()
library(MASS)
install.packages("RSNNS")
help(RSNNS)
??RSNNS
ls
ls()
library(RSNNS)
iris
demo(iris)
install.packages(ISLR)
library(ISLR)
library(nnet)
pltnn
install.packages("ISLR")
library(ISLR)
summary(ISLR::Smarket)
dim(Smarket)
??pairs
help("pairs")
pairs(Smarket
)
plot(Smarket::volume)
plot(Smarket.volume)
plot(Smarket:volume)
plot(Smarket.volume)
attach(Smarket)
plot (Volume)
glm.fit <- glm(Direction ~ ., data=Smarket, family=binomial)
summary(glm.fit)
glm.fit <- glm(Direction ~ . - Direction, data=Smarket, family=binomial)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + , data=Smarket, family=binomial)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + , data=Smarket, family=binomial)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + , data=Smarket, family=binomial)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, 
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, family=binomial)
library(ISLR)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, family=binomial)
summary(glm.fit)
glm.probs = predict(glm.fit, type="response")
glm.probs[1:10]
read.csv(file="../abalone.data")
abalone = read.csv(file="../abalone.data")
summary(abalone)
as.factor(abalone$X15)
hist(abalone$X15)
abalone = read.csv(file="../abalone.data")
summary(abalone)
?read.csv
?sample
abalone$Rings <- as.factor(abalone$Rings)
summary(abalone)
abalone.values <- abalone[,1:8]
summary(abalone.values)
abalone.targets <- abalone[,9]
summary(abalone.targets)
library(RSNNS)
abalone.splitted <- splitForTrainingAndTest(abalone.values, abalone.targets, ratio=.15)
abalone.splitted
abalone.normalized <- normTrainingAndTestSet(abalone.splitted)
abalone.targets <- decodeClassLabels( abalone[,9])
abalone.splitted <- splitForTrainingAndTest(abalone.values, abalone.targets, ratio=.15)
abalone.normalized <- normTrainingAndTestSet(abalone.splitted)
abalone$Sex <- as.factor(abalone$Sex)
abalone.values <- abalone[,1:8]
abalone.targets <- decodeClassLabels( abalone[,9])
abalone.splitted <- splitForTrainingAndTest(abalone.values, abalone.targets, ratio=.15)
abalone.normalized <- normTrainingAndTestSet(abalone.splitted)
abalone.values <- abalone[,2:8]
abalone.splitted <- splitForTrainingAndTest(abalone.values, abalone.targets, ratio=.15)
abalone.normalized <- normTrainingAndTestSet(abalone.splitted)
abalone.model <- mlp(abalone.normalized$inputsTrain, abalone.normalized$targetsTrain, size=5, learnFuncParams=c(.1), maxit=100, inputsTest=abalone.normalized$inputsTest, targetsTest=abalone.normalized$targetsTest)
summary(model)
summary(abalone.model)
abalone.model
weightMatrix(abalone.model)
extractNetInfo(abalone.model)
plotIterativeError(abalone.model)
abalone.predictions <- predict(abalone.model, abalone.normalized$inputsTest)
plotRegressionError(abalone.predictions[,2], abalone.normalized$targetsTest[,2])
abalone = read.csv(file="../abalone.data")
abalone = read.csv(file="abalone.data")
summary(abalone)
as.factor(abalone$Sex)
?mlp
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
abalone <- read.csv("abalone.data")
norm.fun = function(x){(x - min(x))/(max(x) - min(x))}
abalone.norm <-  apply(abalone, 2, norm.fun)
abalone.norm
abalone.net <- neuralnet(abalone.norm$Rings ~ ., abalone.norm, hidden=4)
abalone.net <- neuralnet(abalone.norm$Rings ~ . , abalone.norm, hidden=4)
abalone.net <- neuralnet(abalone.norm$Rings ~ . , data=abalone.norm, hidden=4)
abalone.net <- neuralnet(Rings ~ . , data=abalone.norm, hidden=4)
names(abalone)
abalone.net <- neuralnet(Rings ~ Sex + Length + Diameter + Height + Whole + Shucked + Viscera + Shell , data=abalone.norm, hidden=4)
print(abalone.net)
print(abalone.net)
abalone.net <- neuralnet(Rings ~ Sex + Length + Diameter + Height + Whole + Shucked + Viscera + Shell , data=abalone.norm, hidden=c(10, 10, 10))
abalone.net
help ("apply")
history
history()
print(abalone.net)
abalone <- read.csv("abalone.data")
plot(abalone)
?plot
points(abalone)
plot(Rings ~ Sex, data=abalone)
plot(Rings ~ as.factor(Sex), data=abalone)
plot(Rings ~ as.factor(Sex), data=abalone)
plot( as.factor(Rings) ~ as.factor(Sex), data=abalone)
plot( as.factor(Rings) ~ I(as.factor(Sex):Height, data=abalone)
plot( as.factor(Rings) ~ I(as.factor(Sex):Height), data=abalone)
plot( as.factor(Rings) ~ as.factor(Sex) + Height, data=abalone)
